# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_OMDlib', [dirname(__file__)])
        except ImportError:
            import _OMDlib
            return _OMDlib
        if fp is not None:
            try:
                _mod = imp.load_module('_OMDlib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _OMDlib = swig_import_helper()
    del swig_import_helper
else:
    import _OMDlib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OMD_VERSION_MAJOR = _OMDlib.OMD_VERSION_MAJOR
OMD_VERSION_MINOR = _OMDlib.OMD_VERSION_MINOR
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OMDlib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _OMDlib.SwigPyIterator_value(self)
    def incr(self, n = 1): return _OMDlib.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _OMDlib.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _OMDlib.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _OMDlib.SwigPyIterator_equal(self, *args)
    def copy(self): return _OMDlib.SwigPyIterator_copy(self)
    def next(self): return _OMDlib.SwigPyIterator_next(self)
    def __next__(self): return _OMDlib.SwigPyIterator___next__(self)
    def previous(self): return _OMDlib.SwigPyIterator_previous(self)
    def advance(self, *args): return _OMDlib.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _OMDlib.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _OMDlib.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _OMDlib.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _OMDlib.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _OMDlib.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _OMDlib.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _OMDlib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _OMDlib.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _OMDlib.IntVector___nonzero__(self)
    def __bool__(self): return _OMDlib.IntVector___bool__(self)
    def __len__(self): return _OMDlib.IntVector___len__(self)
    def pop(self): return _OMDlib.IntVector_pop(self)
    def __getslice__(self, *args): return _OMDlib.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _OMDlib.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _OMDlib.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _OMDlib.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _OMDlib.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _OMDlib.IntVector___setitem__(self, *args)
    def append(self, *args): return _OMDlib.IntVector_append(self, *args)
    def empty(self): return _OMDlib.IntVector_empty(self)
    def size(self): return _OMDlib.IntVector_size(self)
    def clear(self): return _OMDlib.IntVector_clear(self)
    def swap(self, *args): return _OMDlib.IntVector_swap(self, *args)
    def get_allocator(self): return _OMDlib.IntVector_get_allocator(self)
    def begin(self): return _OMDlib.IntVector_begin(self)
    def end(self): return _OMDlib.IntVector_end(self)
    def rbegin(self): return _OMDlib.IntVector_rbegin(self)
    def rend(self): return _OMDlib.IntVector_rend(self)
    def pop_back(self): return _OMDlib.IntVector_pop_back(self)
    def erase(self, *args): return _OMDlib.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _OMDlib.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _OMDlib.IntVector_push_back(self, *args)
    def front(self): return _OMDlib.IntVector_front(self)
    def back(self): return _OMDlib.IntVector_back(self)
    def assign(self, *args): return _OMDlib.IntVector_assign(self, *args)
    def resize(self, *args): return _OMDlib.IntVector_resize(self, *args)
    def insert(self, *args): return _OMDlib.IntVector_insert(self, *args)
    def reserve(self, *args): return _OMDlib.IntVector_reserve(self, *args)
    def capacity(self): return _OMDlib.IntVector_capacity(self)
    __swig_destroy__ = _OMDlib.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _OMDlib.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _OMDlib.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _OMDlib.DoubleVector___nonzero__(self)
    def __bool__(self): return _OMDlib.DoubleVector___bool__(self)
    def __len__(self): return _OMDlib.DoubleVector___len__(self)
    def pop(self): return _OMDlib.DoubleVector_pop(self)
    def __getslice__(self, *args): return _OMDlib.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _OMDlib.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _OMDlib.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _OMDlib.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _OMDlib.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _OMDlib.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _OMDlib.DoubleVector_append(self, *args)
    def empty(self): return _OMDlib.DoubleVector_empty(self)
    def size(self): return _OMDlib.DoubleVector_size(self)
    def clear(self): return _OMDlib.DoubleVector_clear(self)
    def swap(self, *args): return _OMDlib.DoubleVector_swap(self, *args)
    def get_allocator(self): return _OMDlib.DoubleVector_get_allocator(self)
    def begin(self): return _OMDlib.DoubleVector_begin(self)
    def end(self): return _OMDlib.DoubleVector_end(self)
    def rbegin(self): return _OMDlib.DoubleVector_rbegin(self)
    def rend(self): return _OMDlib.DoubleVector_rend(self)
    def pop_back(self): return _OMDlib.DoubleVector_pop_back(self)
    def erase(self, *args): return _OMDlib.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _OMDlib.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _OMDlib.DoubleVector_push_back(self, *args)
    def front(self): return _OMDlib.DoubleVector_front(self)
    def back(self): return _OMDlib.DoubleVector_back(self)
    def assign(self, *args): return _OMDlib.DoubleVector_assign(self, *args)
    def resize(self, *args): return _OMDlib.DoubleVector_resize(self, *args)
    def insert(self, *args): return _OMDlib.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _OMDlib.DoubleVector_reserve(self, *args)
    def capacity(self): return _OMDlib.DoubleVector_capacity(self)
    __swig_destroy__ = _OMDlib.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _OMDlib.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class Curve2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Curve2D, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OMDlib.delete_Curve2D
    __del__ = lambda self : None;
    def getDependent(self, *args): return _OMDlib.Curve2D_getDependent(self, *args)
    def getName(self): return _OMDlib.Curve2D_getName(self)
Curve2D_swigregister = _OMDlib.Curve2D_swigregister
Curve2D_swigregister(Curve2D)

class Curve2DSine(Curve2D):
    __swig_setmethods__ = {}
    for _s in [Curve2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve2DSine, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve2DSine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_Curve2DSine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_Curve2DSine
    __del__ = lambda self : None;
    def getDependent(self, *args): return _OMDlib.Curve2DSine_getDependent(self, *args)
Curve2DSine_swigregister = _OMDlib.Curve2DSine_swigregister
Curve2DSine_swigregister(Curve2DSine)

class BodyRigid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyRigid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BodyRigid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_BodyRigid(*args)
        try: self.this.append(this)
        except: self.this = this
    def getX(self): return _OMDlib.BodyRigid_getX(self)
    def getY(self): return _OMDlib.BodyRigid_getY(self)
    def getZ(self): return _OMDlib.BodyRigid_getZ(self)
    def getXd(self): return _OMDlib.BodyRigid_getXd(self)
    def getYd(self): return _OMDlib.BodyRigid_getYd(self)
    def getZd(self): return _OMDlib.BodyRigid_getZd(self)
    def getE0(self): return _OMDlib.BodyRigid_getE0(self)
    def getE1(self): return _OMDlib.BodyRigid_getE1(self)
    def getE2(self): return _OMDlib.BodyRigid_getE2(self)
    def getE3(self): return _OMDlib.BodyRigid_getE3(self)
    def getWlx(self): return _OMDlib.BodyRigid_getWlx(self)
    def getWly(self): return _OMDlib.BodyRigid_getWly(self)
    def getWlz(self): return _OMDlib.BodyRigid_getWlz(self)
    def getXAxis(self): return _OMDlib.BodyRigid_getXAxis(self)
    def getYAxis(self): return _OMDlib.BodyRigid_getYAxis(self)
    def getZAxis(self): return _OMDlib.BodyRigid_getZAxis(self)
    __swig_destroy__ = _OMDlib.delete_BodyRigid
    __del__ = lambda self : None;
BodyRigid_swigregister = _OMDlib.BodyRigid_swigregister
BodyRigid_swigregister(BodyRigid)

class ForceContact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceContact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceContact, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_ForceContact(*args)
        try: self.this.append(this)
        except: self.this = this
    def addBox(self, *args): return _OMDlib.ForceContact_addBox(self, *args)
    def addCapsule(self, *args): return _OMDlib.ForceContact_addCapsule(self, *args)
    def addSphere(self, *args): return _OMDlib.ForceContact_addSphere(self, *args)
    def addCylinder(self, *args): return _OMDlib.ForceContact_addCylinder(self, *args)
    def setCollisionMargin(self, *args): return _OMDlib.ForceContact_setCollisionMargin(self, *args)
    __swig_destroy__ = _OMDlib.delete_ForceContact
    __del__ = lambda self : None;
ForceContact_swigregister = _OMDlib.ForceContact_swigregister
ForceContact_swigregister(ForceContact)

class Force1Body(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force1Body, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Force1Body, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_Force1Body(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTorque(self, *args): return _OMDlib.Force1Body_setTorque(self, *args)
    def setForce(self, *args): return _OMDlib.Force1Body_setForce(self, *args)
    __swig_destroy__ = _OMDlib.delete_Force1Body
    __del__ = lambda self : None;
Force1Body_swigregister = _OMDlib.Force1Body_swigregister
Force1Body_swigregister(Force1Body)

class ForceGravity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceGravity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceGravity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_ForceGravity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_ForceGravity
    __del__ = lambda self : None;
ForceGravity_swigregister = _OMDlib.ForceGravity_swigregister
ForceGravity_swigregister(ForceGravity)

class IntegratorEuler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegratorEuler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegratorEuler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _OMDlib.new_IntegratorEuler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_IntegratorEuler
    __del__ = lambda self : None;
IntegratorEuler_swigregister = _OMDlib.IntegratorEuler_swigregister
IntegratorEuler_swigregister(IntegratorEuler)

class IntegratorRK4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegratorRK4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegratorRK4, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _OMDlib.new_IntegratorRK4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_IntegratorRK4
    __del__ = lambda self : None;
IntegratorRK4_swigregister = _OMDlib.IntegratorRK4_swigregister
IntegratorRK4_swigregister(IntegratorRK4)

class Force2BodySpringDamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force2BodySpringDamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Force2BodySpringDamp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_Force2BodySpringDamp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_Force2BodySpringDamp
    __del__ = lambda self : None;
Force2BodySpringDamp_swigregister = _OMDlib.Force2BodySpringDamp_swigregister
Force2BodySpringDamp_swigregister(Force2BodySpringDamp)

class Model1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model1, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _OMDlib.new_Model1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_Model1
    __del__ = lambda self : None;
    def solve(self, *args): return _OMDlib.Model1_solve(self, *args)
    def getState(self): return _OMDlib.Model1_getState(self)
    def addBodyRigid(self, *args): return _OMDlib.Model1_addBodyRigid(self, *args)
    def addForceOnBody(self, *args): return _OMDlib.Model1_addForceOnBody(self, *args)
    def addTorqueOnBody(self, *args): return _OMDlib.Model1_addTorqueOnBody(self, *args)
    def addForce2BodySpringDamp(self, *args): return _OMDlib.Model1_addForce2BodySpringDamp(self, *args)
    def addForceGravity(self, *args): return _OMDlib.Model1_addForceGravity(self, *args)
    def integrate(self, *args): return _OMDlib.Model1_integrate(self, *args)
    def setIntegratorRK4(self): return _OMDlib.Model1_setIntegratorRK4(self)
    def setIntegratorEuler(self): return _OMDlib.Model1_setIntegratorEuler(self)
    def addForceContact(self, *args): return _OMDlib.Model1_addForceContact(self, *args)
Model1_swigregister = _OMDlib.Model1_swigregister
Model1_swigregister(Model1)

class JointTranslational(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointTranslational, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointTranslational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_JointTranslational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_JointTranslational
    __del__ = lambda self : None;
JointTranslational_swigregister = _OMDlib.JointTranslational_swigregister
JointTranslational_swigregister(JointTranslational)

class JointRevolute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointRevolute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointRevolute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_JointRevolute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_JointRevolute
    __del__ = lambda self : None;
JointRevolute_swigregister = _OMDlib.JointRevolute_swigregister
JointRevolute_swigregister(JointRevolute)

class JointSpherical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointSpherical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointSpherical, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_JointSpherical(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_JointSpherical
    __del__ = lambda self : None;
JointSpherical_swigregister = _OMDlib.JointSpherical_swigregister
JointSpherical_swigregister(JointSpherical)

class JointCylindrical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointCylindrical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointCylindrical, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_JointCylindrical(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_JointCylindrical
    __del__ = lambda self : None;
JointCylindrical_swigregister = _OMDlib.JointCylindrical_swigregister
JointCylindrical_swigregister(JointCylindrical)

class JointUniversal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointUniversal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointUniversal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_JointUniversal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_JointUniversal
    __del__ = lambda self : None;
JointUniversal_swigregister = _OMDlib.JointUniversal_swigregister
JointUniversal_swigregister(JointUniversal)

class ForceRevJnt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceRevJnt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceRevJnt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_ForceRevJnt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_ForceRevJnt
    __del__ = lambda self : None;
    def apply(self, *args): return _OMDlib.ForceRevJnt_apply(self, *args)
    def SetTorque(self, *args): return _OMDlib.ForceRevJnt_SetTorque(self, *args)
    def Add2Torque(self, *args): return _OMDlib.ForceRevJnt_Add2Torque(self, *args)
    def getJoint(self): return _OMDlib.ForceRevJnt_getJoint(self)
ForceRevJnt_swigregister = _OMDlib.ForceRevJnt_swigregister
ForceRevJnt_swigregister(ForceRevJnt)

class ForceRevJntPIDCurve2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceRevJntPIDCurve2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceRevJntPIDCurve2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_ForceRevJntPIDCurve2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_ForceRevJntPIDCurve2D
    __del__ = lambda self : None;
ForceRevJntPIDCurve2D_swigregister = _OMDlib.ForceRevJntPIDCurve2D_swigregister
ForceRevJntPIDCurve2D_swigregister(ForceRevJntPIDCurve2D)

class ForceRevJntSpringDamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceRevJntSpringDamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceRevJntSpringDamp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _OMDlib.new_ForceRevJntSpringDamp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_ForceRevJntSpringDamp
    __del__ = lambda self : None;
ForceRevJntSpringDamp_swigregister = _OMDlib.ForceRevJntSpringDamp_swigregister
ForceRevJntSpringDamp_swigregister(ForceRevJntSpringDamp)

class Model2(Model1):
    __swig_setmethods__ = {}
    for _s in [Model1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model2, name, value)
    __swig_getmethods__ = {}
    for _s in [Model1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _OMDlib.new_Model2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OMDlib.delete_Model2
    __del__ = lambda self : None;
    def addJointTranslational(self, *args): return _OMDlib.Model2_addJointTranslational(self, *args)
    def addJointRevolute(self, *args): return _OMDlib.Model2_addJointRevolute(self, *args)
    def addForceRevJnt(self, *args): return _OMDlib.Model2_addForceRevJnt(self, *args)
    def buildTree(self): return _OMDlib.Model2_buildTree(self)
    def solve(self, *args): return _OMDlib.Model2_solve(self, *args)
    def addBodyRigid(self, *args): return _OMDlib.Model2_addBodyRigid(self, *args)
    def addForceRevJntPIDCurve2D(self, *args): return _OMDlib.Model2_addForceRevJntPIDCurve2D(self, *args)
    def addForceRevJntSpringDamp(self, *args): return _OMDlib.Model2_addForceRevJntSpringDamp(self, *args)
Model2_swigregister = _OMDlib.Model2_swigregister
Model2_swigregister(Model2)

class Model3(Model1):
    __swig_setmethods__ = {}
    for _s in [Model1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model3, name, value)
    __swig_getmethods__ = {}
    for _s in [Model1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _OMDlib.new_Model3()
        try: self.this.append(this)
        except: self.this = this
    def addBodyRigid(self, *args): return _OMDlib.Model3_addBodyRigid(self, *args)
    def addJointTrans(self, *args): return _OMDlib.Model3_addJointTrans(self, *args)
    def addJointRevolute(self, *args): return _OMDlib.Model3_addJointRevolute(self, *args)
    def addJointCylindrical(self, *args): return _OMDlib.Model3_addJointCylindrical(self, *args)
    def addJointSpherical(self, *args): return _OMDlib.Model3_addJointSpherical(self, *args)
    def addJointUniversal(self, *args): return _OMDlib.Model3_addJointUniversal(self, *args)
    def addForceRevJnt(self, *args): return _OMDlib.Model3_addForceRevJnt(self, *args)
    def addForceRevJntPIDCurve2D(self, *args): return _OMDlib.Model3_addForceRevJntPIDCurve2D(self, *args)
    def addForceRevJntSpringDamp(self, *args): return _OMDlib.Model3_addForceRevJntSpringDamp(self, *args)
    def calcIndependentStates(self): return _OMDlib.Model3_calcIndependentStates(self)
    __swig_destroy__ = _OMDlib.delete_Model3
    __del__ = lambda self : None;
Model3_swigregister = _OMDlib.Model3_swigregister
Model3_swigregister(Model3)

# This file is compatible with both classic and new-style classes.


